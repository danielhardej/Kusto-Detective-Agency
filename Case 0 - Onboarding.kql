// Let's see how many bounties were paid out for each EventType

DetectiveCases
| extend bounty = toreal(Properties.Bounty)
| where bounty > 0
| summarize count(bounty) by EventType

// EventType    count_bounty
// CaseOpened	111255



// --------------------------------------------------------------------------------------------------------------------------------
// Strange, bounty only appears in records with the event type CaseOpened. Let's see which case paid out the biggest bounty

DetectiveCases
| extend bounty = toreal(Properties.Bounty)
| top 10 by bounty desc

// 2022-04-15T13:39:00Z	CaseOpened		CASE_0367822	{"Bounty":9778}	9778
// 2022-05-05T08:19:00Z	CaseOpened		CASE_0427007	{"Bounty":9049}	9049
// 2022-02-08T06:50:00Z	CaseOpened		CASE_0164498	{"Bounty":9003}	9003
// 2022-04-23T22:40:00Z	CaseOpened		CASE_0393524	{"Bounty":8945}	8945
// 2022-03-29T05:03:00Z	CaseOpened		CASE_0313869	{"Bounty":8918}	8918
// 2022-06-25T08:41:00Z	CaseOpened		CASE_0582450	{"Bounty":8884}	8884
// 2022-10-23T03:48:00Z	CaseOpened		CASE_0948098	{"Bounty":8728}	8728
// 2022-06-21T05:12:00Z	CaseOpened		CASE_0569064	{"Bounty":8692}	8692
// 2022-01-19T01:30:00Z	CaseOpened		CASE_0103765	{"Bounty":8682}	8682
// 2022-12-03T08:22:00Z	CaseOpened		CASE_1073843	{"Bounty":8677}	8677



// --------------------------------------------------------------------------------------------------------------------------------
// How many cases did each detective solve? And who solved the most cases?

DetectiveCases
| where EventType == 'CaseSolved'
| summarize CasesSolved=count() by DetectiveId
| order by CasesSolved desc

// DetectiveId	        CasesSolved
// kvc61f0b891ee26195970a	175
// kvc12a22e9e9e65c1694f1	169
// kvc29d392ca965f09646f8	165
// kvc33c12db9f71d2d4866c	162
// kvc1ff1bda298e5d0ef37d	161
// kvc771f890e1d2999166bf	157
// kvc30895a517379801a06e	156

// Good job, kvc61f0b891ee26195970a!


// --------------------------------------------------------------------------------------------------------------------------------
// Let's look at the time difference between the event of 'CaseOpened' and 'CaseAssigned' for each case. We can create a new column 
// called TTA (Time To Assignment) and store the difference between the two events:

DetectiveCases
| where EventType == 'CaseOpened'
| project CaseOpened = Timestamp, CaseId
| join kind=inner (
    DetectiveCases
    | where EventType == 'CaseAssigned'
    | summarize FirstAssigned=min(Timestamp) by CaseId)
    on CaseId
| extend TTA = FirstAssigned - CaseOpened
| order by TTA desc 

// CaseOpened	        CaseId	        CaseId1         FirstAssigned	        TTA
// 2022-01-21T15:39:00Z	CASE_0111872	CASE_0111872	2022-02-01T06:22:00Z	10.14:43:00
// 2022-02-07T10:03:00Z	CASE_0162027	CASE_0162027	2022-02-16T19:31:00Z	9.09:28:00
// 2022-01-28T19:19:00Z	CASE_0133812	CASE_0133812	2022-02-05T16:38:00Z	7.21:19:00
// 2022-02-09T03:48:00Z	CASE_0167129	CASE_0167129	2022-02-16T10:47:00Z	7.06:59:00

// Or we can change the last line to this to get the average TTA for each detective:
| summarize average=avg(FirstAssigned - CaseOpened)     // 09:18:50.7488963

// Or we can change the last line to find the shortest TTA:
| summarize arg_min(TTA, CaseId)                    // 00:01:00	CASE_1126129

// Or we can change the last line to find the longest TTA:
| summarize arg_max(TTA, CaseId)                    // 10.14:43:00	CASE_0111872



// --------------------------------------------------------------------------------------------------------------------------------
// Then we can do the same to see how long it took for each detective to solve a case:

DetectiveCases
| where EventType == 'CaseSolved'
| project CaseSolved = Timestamp, CaseId, DetectiveId
| join kind=inner (
    DetectiveCases
    | where EventType == 'CaseAssigned'
    | summarize FirstAssigned=min(Timestamp) by CaseId)
    on CaseId
| extend TTS = CaseSolved - FirstAssigned
| order by TTS asc

// CaseSolved	        CaseId	        DetectiveId	            CaseId1	        FirstAssigned	        TTS
// 2022-12-28T19:57:00Z	CASE_1151950	kvc438d18e10ac9cae3413	CASE_1151950	2022-12-28T19:56:00Z	00:01:00
// 2022-12-10T18:17:00Z	CASE_1095704	kvc753a3d5c7c969c0c1d3	CASE_1095704	2022-12-10T18:16:00Z	00:01:00
// 2022-12-03T10:59:00Z	CASE_1072633	kvc4f44da9cc91d10f47b2	CASE_1072633	2022-12-03T10:58:00Z	00:01:00
// 2022-04-16T03:23:00Z	CASE_0368834	kvc6ab04081daea94e55fa	CASE_0368834	2022-04-16T03:21:00Z	00:02:00
// 2022-06-21T22:24:00Z	CASE_0570345	kvc19cad60aa5682bf40bc	CASE_0570345	2022-06-21T22:22:00Z	00:02:00



// --------------------------------------------------------------------------------------------------------------------------------
// What was the average time to solve a case for each detective?

DetectiveCases
| where EventType == 'CaseSolved'
| project CaseSolved = Timestamp, CaseId, DetectiveId
| join kind=inner (
    DetectiveCases
    | where EventType == 'CaseAssigned'
    | summarize FirstAssigned=min(Timestamp) by CaseId)
    on CaseId
| extend TTS = CaseSolved - FirstAssigned
| summarize TTS_average=avg(TTS) by DetectiveId

// DetectiveId	            TTS_average
// kvc484919728994ac440a4	9.00:19:09.2307692
// kvc12559104da99e9940af	11.11:39:15
// kvc3911d408c4eb230066e	9.09:10:13.9285714
// kvc12fec78cc41a857e64c	9.21:40:35.5813953
// kvc234b9f3b3f94c83626a	9.21:02:05.8536585
// kvc689604bcb2cab8c8659	11.01:41:42.8571428
// kvc02112e467011cd99765	11.03:52:05.8064516
// kvc207bcf7d0e48db252e8	10.13:52:46.3636363
// kvc51a41565fdab4f227e7	9.15:58:13.3333333
// kvc17ddd24ead55ddf2437	8.23:04:25.7142857
// kvc5b163d5ee6b9e29260b	9.06:16:04.7368421



// --------------------------------------------------------------------------------------------------------------------------------
// How many cases were opened in 2022?

DetectiveCases
| where EventType == 'CaseOpened'
| where Timestamp between (datetime(2022-01-01) .. datetime(2022-12-31))
| summarize count()

// 110986 but that's the wrong answer
// if we use summarize arg_min(Timestamp, *) and arg_max(Timestamp, *) we can see that they're all in 2022 anyway. So a simlper query would just be:

DetectiveCases
| where EventType == 'CaseOpened'
| summarize count()

// Giving us 111255



// --------------------------------------------------------------------------------------------------------------------------------
// How many detectives solved at least one case?

DetectiveCases
| where EventType == 'CaseSolved'
| summarize dcount(DetectiveId)

// 10967



// --------------------------------------------------------------------------------------------------------------------------------
// Who was the detective that solved the most cases? (As above)

DetectiveCases
| where EventType == 'CaseSolved'
| summarize CasesSolved=count() by DetectiveId
| order by CasesSolved desc

// DetectiveId	        CasesSolved
// kvc61f0b891ee26195970a	175



// --------------------------------------------------------------------------------------------------------------------------------
// What is the average time, rounded to seconds, taken to solve a case?

DetectiveCases
| where EventType == 'CaseSolved'
| project CaseSolved = Timestamp, CaseId, DetectiveId
| join kind=inner (
    DetectiveCases
    | where EventType == 'CaseOpened'
    | summarize FirstAssigned=min(Timestamp) by CaseId)
    on CaseId
| extend TTS = CaseSolved - FirstAssigned
| summarize TTS_average=avg(TTS)
// | extend TTS_average = TTS_average / 1s      // didn't need this line, but the intention was to convert it to seconds!

// TTS_average
// 5.23:02:50.0378568



// --------------------------------------------------------------------------------------------------------------------------------
// Who is the detective that earned most money in 2022?
// (This was hard.)

DetectiveCases
| where EventType == 'CaseOpened'
| extend bounty = toreal(Properties.Bounty)
| where bounty > 0

// This is annoying. The query above will show CaseId and Bounty, but not DetectiveId. So we need to join it to the DetectiveCases table to get the DetectiveId.

let bounties = (
    DetectiveCases
    | where EventType == 'CaseOpened'
    | extend bounty = toreal(Properties.Bounty)
    | where bounty > 0
    | project CaseId, bounty
);
DetectiveCases
| where EventType == 'CaseOpened'
| join kind=inner bounties on CaseId
| summarize bounty=sum(bounty) by DetectiveId
| order by bounty desc

// That didn't work. We just get a sum of all of the bounties. Dumb mistake: we should join our bounties table to CaseSolved.

let bounties =
    DetectiveCases
    | where EventType == 'CaseOpened'
    | extend bounty = toreal(Properties.Bounty);
DetectiveCases
| where EventType == 'CaseSolved'
| join kind=inner bounties on CaseId
| summarize total_detective_bounty=sum(bounty) by DetectiveId
| order by total_detective_bounty

// DetectiveId	            total_detective_bounty
// kvc61f0b891ee26195970a	874699
// kvc12a22e9e9e65c1694f1	838852
// kvc29d392ca965f09646f8	812028
// kvc1ff1bda298e5d0ef37d	805991
// kvc30895a517379801a06e	787897

// Looks better. We get a ranking of detectives by total bounties collected, but it's still the wrong answer! So then we gotta think about how many 
// detectives were assigned to each case? Because recall that the challenge tells us: "only the first detective to crack the case gets the bounty and major street cred!"

DetectiveCases
| where EventType == 'CaseAssigned'
| summarize count() by CaseId

// CaseId	    count_
// CASE_0793531	17
// CASE_0791249	32
// CASE_0787767	26
// CASE_0800040	18
// etc.

// We can see from this query that nearly every case has multiple detectives assigned to it. So we need to find the first detective to crack the case.

DetectiveCases
| where EventType == 'CaseSolved'
| summarize arg_min(Timestamp, DetectiveId) by CaseId

// CaseId	    Timestamp               DetectiveId
// CASE_0011844	2022-01-01T00:02:00Z	kvc17302cb0e2744fd868d
// CASE_0043614	2022-01-01T00:03:00Z	kvc411a86c9c2b70964170
// CASE_0007867	2022-01-01T00:06:00Z	kvc25a44e86adc2c8b3016
// CASE_0032867	2022-01-01T00:11:00Z	kvc31dfa8dc3ac423c0219
// CASE_0007140	2022-01-01T00:12:00Z	kvc3faec621b9657cfe581
// CASE_0026925	2022-01-01T00:13:00Z	kvc37452d89cf87d5885b2

// This query will get all of our solved cases and then find the earliest timestamp at which that case was solved and the DetectiveId associated with that timestamp. We then need to 
// make sure we sort by CaseId so we can join it with our bounties table on CaseId.

// Putting it all together:

let bounties = DetectiveCases
    | where EventType == 'CaseOpened'
    | extend bounty = toreal(Properties.Bounty);
let first_detective_solved = DetectiveCases
    | where EventType == 'CaseSolved'
    | summarize arg_min(Timestamp, DetectiveId) by CaseId;
DetectiveCases
| join kind=inner first_detective_solved on CaseId
| join kind=inner bounties on CaseId
| summarize total_detective_bounty=sum(bounty) by DetectiveId1
| order by total_detective_bounty

// DetectiveId	            total_detective_bounty
// kvc12a22e9e9e65c1694f1	13228963
// kvc61f0b891ee26195970a	12676911
// kvc33c12db9f71d2d4866c	11591288

// Woohoo! We got it! Congratulations to detective kvc12a22e9e9e65c1694f1, who earnt a total of 13,228,963 in 2022!
